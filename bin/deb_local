#! /usr/bin/env ruby
require 'find'
require 'optparse'
require 'autoproj'
require 'autobuild'
require 'rock/packaging'
require 'tempfile'

def build_and_install_locally(packager, pkg_name, options)
    options, unknown_options = Kernel.filter_options options,
        :release_name => 'local',
        :rock_base_install_dir => '/opt/rock',
        :patch_dir => nil,
        :package_version => nil,
        :debian_package_name => pkg_name.gsub("/",'-'),
        :rebuild => false,
        :reinstall => false

    arguments = ""
    if options[:release_name]
        arguments += "--release-name #{options[:release_name]}"
        arguments += " "
    end
    if options[:rock_base_install_dir]
        arguments += "--rock-base-install-dir #{options[:rock_base_install_dir]}"
        arguments += " "
    end
    if options[:patch_dir]
        arguments += "--patch-dir #{options[:patch_dir]}"
        arguments += " "
    end
    if options[:package_version]
        arguments +=  "--package-version #{options[:package_version]}"
        arguments += " "
    end
    arguments +="#{pkg_name}"

    puts "Debian packaging: '#{pkg_name}' with arguments #{arguments}"
    debian_package_dir = File.join(packager.build_dir, options[:debian_package_name])
    deb_files = Dir.glob(File.join(debian_package_dir,"*.deb"))
    if options[:rebuild] || deb_files.empty?
        puts "############### package #{pkg_name} ###################"
        rebuild_log = File.join(packager.log_dir, "#{options[:debian_package_name]}-deb_local-rebuild.log")
        cmd = "deb_package --package --rebuild #{arguments} > #{rebuild_log}"
        puts "Execution of: #{cmd}"
        if !system(cmd)
            raise RuntimeError, "Local rebuild of pkg #{pkg_name} failed -- see #{rebuild_log}"
        end
        puts "############### build #{pkg_name} #####################"
        build_log = File.join(packager.log_dir,"#{options[:debian_package_name]}-deb_local-build-local.log")
        cmd = "deb_package --build-local #{arguments} > #{build_log}"
        puts "Execution of: #{cmd}"
        if !system(cmd)
            raise RuntimeError, "Local build of pkg #{pkg_name} failed -- see #{build_log}"
        end
    end

    if options[:reinstall] || !Autoproj::Packaging::Installer.installed?(options[:debian_package_name])
        puts "############### install #{pkg_name} #####################"
        install_log = File.join(packager.log_dir,"#{options[:debian_package_name]}-deb_local-install.log")
        cmd = "deb_package --install #{arguments} > #{install_log}"
        puts "Execution of: #{cmd}"
        if !system(cmd)
            raise RuntimeError, "Local install of pkg #{pkg_name} failed -- see #{install_log}"
        else
            packager.register_debian_package(options[:debian_package_name],
                                             options[:release_name],
                                             packager.autodetect_linux_distribution_release)
        end
    end
end

o_skip = false
o_reinstall = false
o_verbose = false
o_no_deps = false
o_prepare_local_build = false
o_patch_dir = "#{ENV['AUTOPROJ_CURRENT_ROOT']}/deb_patches"

build_options = Hash.new
options = OptionParser.new do |opt|
    opt.banner = "Usage: deb_local [options]"
    opt.on('--verbose', 'Display output') do
        o_verbose = true
    end
    opt.on("--patch-dir DIR", String, "Overlay directory to patch existing packages (and created gems) during the packaging process") do |dir|
        patch_dir = File.expand_path(dir)
        if !File.directory?(patch_dir)
            puts "Given patch directory '#{patch_dir}' does not exist"
            exit -1
        end
        o_patch_dir = patch_dir
    end
    opt.on("--release-name NAME", String, "Release name for the generated set of packages -- debian package will be installed in a subfolder with this name in base dir") do |name|
        build_options[:release_name] = name
    end
    opt.on("--rock-base-install-dir DIR", String, "Rock base installation directory (prefix) for deployment of the local debian packages") do |dir|
        require 'pathname'
        if !Pathname.new(dir).absolute?
            raise ArgumentError, "Given path for --rock-base-install-dir has to be absolute, but was relative: '#{dir}'"
        end
        build_options[:rock_base_install_dir] = dir
    end
    opt.on("--rebuild","Rebuild package (otherwise the existing packaged deb will be used") do
        build_options[:rebuild] = true
    end
    opt.on("--no-deps","Ignore building dependencies") do
        o_no_deps = true
    end
    opt.on("--prepare", "Prepare the local building of packages") do
        o_prepare_local_build = true
    end
    opt.on("--reinstall", "Reinstall already installed packages") do
        o_reinstall = true
    end
end

o_selected_packages = options.parse(ARGV)

build_options[:release_name] ||= 'local'
if File.exists? o_patch_dir
    build_options[:patch_dir] = o_patch_dir
else
    Autoproj.warn "Patch directory: #{patch_dir} does not exist"
    exit 0
end


packager = Autoproj::Packaging::Debian.new
if o_prepare_local_build
    puts "Preparing local building of packages"
    Autoproj::Packaging::Installer.install_all_requirements

    tempfile = Tempfile.new("jenkins.conf.")
    document_root = File.join(packager.deb_repository)
    packages_subfolder = build_options[:release_name]
    release_prefix = build_options[:release_name]
    autogenerated_config = tempfile.path

    Autoproj::Packaging::Installer.create_webserver_config(document_root, packages_subfolder,
                                                           release_prefix, autogenerated_config)
    Autoproj::Packaging::Installer.install_webserver_config(autogenerated_config, release_prefix)

    puts "Preparation completed"
    exit 0
end

Autoproj.silent = true
root_dir  = Autoproj::CmdLine.initialize_root_directory
selection = Autoproj::CmdLine.initialize_and_load(nil)

packager.rock_release_name = build_options[:release_name]
build_options[:packager] = packager
packager.initialize_reprepro_repository(build_options[:release_name])
distribution,release = Autoproj::OSDependencies.operating_system
debian_architecture= "#{`dpkg --print-architecture`}".strip

puts "Building local package for: #{packager.autodetect_linux_distribution_release}, architecture: #{packager.autodetect_dpkg_architecture}"

selected_rock_packages = o_selected_packages.select do |name|
    if pkg = Autoproj.manifest.package(name)
        Autoproj.debug "Package: #{name} is a known rock package"
        true
    elsif Autoproj::Packaging::GemDependencies::isGem(name)
        Autoproj.debug "Package: #{name} is a gem"
        packager.ruby_gems << [name, nil]
        false
    else
        true
    end
end

Autoproj.info "Selected_packages: #{o_selected_packages} --> rock_packages: #{selected_rock_packages}, gems: #{packager.ruby_gems}"

# When a ruby gem shall be packaged directly there are no selected rock
# packages, but selected ony
is_gem = selected_rock_packages.empty? && !o_selected_packages.empty?
if !is_gem
    selection = Autoproj::CmdLine.initialize_and_load(selected_rock_packages)
    selection = Autoproj::CmdLine.resolve_user_selection(selection).packages

    # Compute dependencies
    rock_packages = packager.all_required_packages selection
    rock_packages = rock_packages[:packages]
end

if !packager.ruby_gems || packager.ruby_gems.empty?
    puts "# No Gems to be packaged"
else
    puts "# Packaging Gems ---- #{packager.ruby_gems}"
    packager.ruby_gems.each do |pkg, version|
        is_osdeps = false
        native_name, is_osdeps = packager.native_dependency_name(pkg)
        if is_osdeps
            Autoproj.debug "Gem: #{pkg} is available as os dependency: #{native_name} (therefore it will not be build)"
            next
        end

        pkg_build_options = build_options.dup
        pkg_build_options[:debian_package_name] = packager.debian_ruby_name(pkg,true)
        if version
            pkg_build_options[:package_version] = version
        end
        if !o_no_deps || pkg =~ /#{o_selected_packages.first}/
            build_and_install_locally(packager, pkg, pkg_build_options)
        end
    end
end

if !rock_packages || rock_packages.empty?
    puts "# No Rock Packages to be packaged"
else
    pkg_names = rock_packages.collect {|pkg| pkg.name }
    puts "# Packaging Rock Packages --- #{pkg_names}"
    rock_packages.each do |pkg|
        pkg_build_options = build_options.dup
        pkg_build_options[:debian_package_name] = packager.debian_name(pkg,true)
        if !o_no_deps || pkg.name =~ /#{o_selected_packages.first}/
            build_and_install_locally(packager, pkg.name, pkg_build_options)
        end
    end
end
