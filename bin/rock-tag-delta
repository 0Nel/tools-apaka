#! /usr/bin/env ruby

BASE_DIR = File.expand_path('..', File.dirname(__FILE__))

def package_status(pkg, from_tag, to_tag)
    pkg_name =
        if pkg.respond_to?(:text_name)
            pkg.text_name
        else pkg.autoproj_name
        end

    result = [pkg_name, [], []]

    if !File.directory?(pkg.srcdir)
        Autoproj.warn "#{pkg.name} not checked out (expected to be in #{pkg.srcdir})"
        raise ArgumentError, "#{pkg_name} is not checked out yet"
    elsif !pkg.importer
        raise ArgumentError, "configuration error: #{pkg_name} has no VCS"
    elsif !pkg.importer.respond_to?(:status)
        raise ArgumentError, "the #{pkg.importer.class.name.gsub(/.*::/, '')} importer does not support status display"
    else
        begin
            status = pkg.importer.delta_between_tags(pkg, from_tag, to_tag)
        rescue ArgumentError => e
            # tag might be unknown, thus trying to take the diff between the last two tags
            pkg_tags = pkg.importer.tags(pkg)
            tag_list = pkg_tags.keys.sort
            if tag_list.size < 2
                raise ArgumentError, "Package #{pkg_name} has less than two tags (might be new), thus cannot create delta"
            elsif tag_list.index(to_tag) # make sure the tag relates to a Rock package
                # retrieving the index as follows is required to deal with parallel version schemas (as in utilrb)
                previous_release_tag_index = tag_list.index(to_tag) - 1
                status = pkg.importer.delta_between_tags(pkg, to_tag, tag_list[previous_release_tag_index])
            else
                raise
            end
        end
        if status.uncommitted_code
            Autoproj.warn "the #{pkg_name} package contains uncommitted modifications"
        end

        case status.status
        when Autobuild::Importer::Status::UP_TO_DATE
            result[0] = "#{pkg_name}: in sync"
        else
            result[1] = status.local_commits
            result[2] = status.remote_commits
        end
    end

    result
end
require 'autoproj'
require 'erb'

dest_path = nil
sort_info = 0
parser = OptionParser.new do |opt|
    opt.banner = "rock-status from_tag to_tag dest_path"
    opt.on("--sort=ID", Integer, "the sort_info value for the generated page") do |info|
	sort_info = info
    end
end
remaining = parser.parse(ARGV)

from_tag = remaining.shift
to_tag   = remaining.shift
dest_path   = remaining.shift

if !from_tag || !to_tag
    puts parser
    exit 1
elsif !dest_path
    puts parser
    exit 1
end

io = File.open(dest_path, 'w')

Autoproj::CmdLine.initialize_and_load(["--update"])
Autoproj::CmdLine.parse_arguments(['--update'], false)
Autoproj::CmdLine.update_os_dependencies = false
Autoproj::CmdLine.initialize
Autoproj::CmdLine.update_configuration
Autoproj::CmdLine.load_configuration
Autoproj::CmdLine.setup_all_package_directories

manifest = Autoproj.manifest
target_packages = manifest.each_package.
    find_all { |pkg| pkg }
target_package_names = target_packages.map(&:name)

new_packages = []
obsolete_packages = [] 
in_from, in_to = 0, 0
errors, needs_push, needs_merge = [], [], []

status = target_packages.sort_by { |pkg| pkg.name }.map do |pkg|
    begin
        main, from_commits, to_commits = package_status(pkg, from_tag, to_tag)
    rescue Exception => status_error
        puts "Error: #{status_error} #{status_error.backtrace}"
        errors << pkg
        next([pkg, status_error])
    end

    if main
        in_from += from_commits.size
        if !from_commits.empty?
            needs_push << pkg
        end
        in_to += to_commits.size
        if !to_commits.empty?
            needs_merge << pkg
        end
    end
    [pkg, main, from_commits, to_commits]
end.compact

id = 0
template = File.join(BASE_DIR, 'lib', 'rock', 'rock-tag-delta.page.template')
erb = ERB.new(File.read(template))
io.puts erb.result(binding)

