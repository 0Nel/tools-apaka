#! /bin/bash

usage() {
    echo "usage: build_server.sh buildconf_git buildconf_bootstrap [mail_header mail_address mail_smtp]"
    echo "where buildconf_git is the build configuration repository as a git URL"
    echo "      buildconf_bootstrap is either a path to a config file or an"
    echo "          empty argument it should be set if the script should"
    echo "          bootstrap a fresh installation"
    echo "and the mail_* arguments are the parameters to mail errors (leave blank to not send anything)"
    exit 1
}

BUILDCONF_GIT=$1
BUILDCONF_BOOTSTRAP=$2
if test -z "$BUILDCONF_GIT"; then
    usage
fi

MAIL_HEADER=$3
if test -n "$MAIL_HEADER"; then
    MAIL_ADDRESS=$4
    MAIL_SMTP=$5
    if test -z "$MAIL_ADDRESS" || test -z "$MAIL_SMTP"; then
        usage
    fi
    COMMON_ARGS="--mail-subject="$MAIL_HEADER" --mail-from=$MAIL_ADDRESS --mail-to=$MAIL_ADDRESS --mail-smtp=$MAIL_SMTP --mail-only-errors"
else
    COMMON_ARGS=""
fi

export AUTOPROJ_BOOTSTRAP_IGNORE_NONEMPTY_DIR=1
if test -z "$AUTOPROJ_OSDEPS_MODE"; then
    export AUTOPROJ_OSDEPS_MODE=all
fi

set -e

# If we are bootstrapping, delete the old build artifacts and create a local
# configuration with the specified configuration file
if test -n "$BUILDCONF_BOOTSTRAP"; then
    rm -rf buildconf dev

    git clone $BUILDCONF_GIT buildconf
    cd buildconf
    cp -f $BUILDCONF_BOOTSTRAP config.yml
    git add -f config.yml
    git commit -a -m "build server configuration"
    cd ..

    BUILDCONF_GIT=$PWD/buildconf
fi

mkdir -p dev
cd dev

# Check if we do need to bootstrap
if ! test -d autoproj; then
    sudo apt-get update
    sudo apt-get -y install ruby rubygems wget
    rm -f autoproj_bootstrap
    wget http://rock-robotics.org/autoproj_bootstrap
    ruby autoproj_bootstrap git $BUILDCONF_GIT
fi

. ./env.sh
autoproj full-build $COMMON_ARGS

