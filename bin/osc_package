#! /usr/bin/env ruby
require 'rock/packaging/debian'

osc_dir = nil
skip = false
options = OptionParser.new do |opt|
    opt.on('--skip', 'Skip existing packages') do
        skip = true
    end
    opt.on("--osc DIR", String, "OpenBuildService checkout in which the generated packages should be registered") do |dir|
        osc_dir = dir
    end
end
remaining = options.parse(ARGV)

root_dir  = Autoproj::CmdLine.initialize_root_directory
selection = Autoproj::CmdLine.initialize_and_load(remaining)

packager = Autoproj::Packaging::Debian.new(File.join(Autoproj.root_dir, "debian"))
Autobuild.do_update = true
selection.each_with_index do |pkg_name, i|
    pkg = Autoproj.manifest.package(pkg_name).autobuild

    if skip && osc_dir
        pkg_osc_dir = File.join(osc_dir, Autoproj::Packaging::Packager.osc_package_name(pkg))
        if File.directory?(pkg_osc_dir)
            puts "skipping existing package #{pkg_name} (#{i + 1}/#{selection.size})"
            next
        end
    end

    puts "packaging #{pkg_name} (#{i + 1}/#{selection.size})"
    pkg.importer.import(pkg)
    if File.file?(File.join(pkg.srcdir, "CMakeLists.txt")) && File.read(File.join(pkg.srcdir, "CMakeLists.txt")) =~ /include\(Rock\)|Rock\.cmake/
        pkg.depends_on "base/types"
    end

    files = begin packager.package(pkg)
            rescue Interrupt
                raise
            rescue Exception => e
                puts "failed to package #{pkg.name}: #{e.message}"
                next
            end

    if osc_dir
        pkg_osc_dir = File.join(osc_dir, Autoproj::Packaging::Packager.osc_package_name(pkg))
        if !File.directory?(pkg_osc_dir)
            FileUtils.mkdir_p pkg_osc_dir
            system("osc add #{pkg_osc_dir}")
        end
        # Remove files that are not lised in "files"
        patterns = packager.file_patterns.map do |p|
            File.join(pkg_osc_dir, p)
        end
        Dir.glob(patterns) do |existing_path|
            if !files.include?(File.basename(existing_path))
                puts "deleting #{existing_path}: not present in the current packaging"
                FileUtils.rm_f existing_path
                system("osc rm #{existing_path}")
            end
        end
        # Add the new unchanged files
        files.each do |path|
            target_file = File.join(pkg_osc_dir, path)
            exists = File.exists?(target_file)
            if exists 
                if File.read(path) == File.read(target_file)
                    puts "#{target_file} is unchanged, skipping"
                else
                    puts "updating #{target_file}"
                    FileUtils.mv path, pkg_osc_dir
                end
            else
                puts "adding #{target_file}"
                FileUtils.mv path, pkg_osc_dir
                system("osc add #{File.join(pkg_osc_dir, path)}")
            end
        end
        system("osc ci #{pkg_osc_dir} -m \"autopackaged using autoproj-packaging tools\"")
    end
end

