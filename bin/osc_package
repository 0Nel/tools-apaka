#! /usr/bin/env ruby
require 'rock/packaging/debian'

osc_dir = nil
skip = false
o_patch_dir = nil
o_osdeps = false
o_commit = false
o_available = false
o_list_build_projects = false
o_extra_gem = nil
o_all_packages = true
o_rebuild = false
o_src_dir = nil

options = OptionParser.new do |opt|
    opt.on('--skip', 'Skip existing packages') do
        skip = true
    end
    opt.on("--osc DIR", String, "OpenBuildService checkout in which the generated packages should be registered, in combination with osdeps it limits the update to the osdeps packages") do |dir|
        osc_dir = File.expand_path(dir)
    end
    opt.on("--patch-dir DIR", String, "Overlay directory to patch existing packages (and created gems) during the packaging process") do |dir|
        o_patch_dir = File.expand_path(dir)
    end

    opt.on("--osdeps","Generate osdeps directories which are not yet available as packages") do
        o_osdeps = true
    end

    opt.on("-c","--commit","Commit the result on the OBS") do
        o_commit = true
    end

    opt.on("--[no-]verbose", "display output of commands on stdout") do |v| Autobuild.verbose = v end
    opt.on("--[no-]debug", "debug information (for debugging purposes)") do |v| Autobuild.debug = v end

    opt.on("--available", "list the available packages across the referenced build projects") do
        o_available = true
    end
    opt.on("--list-build-projects", "list the referenced build projects") do
        o_list_build_projects = true
    end

    opt.on("--gem NAME", "provide the name of a gem to convert") do |gem|
        o_all_packages = false
        o_extra_gem = gem
    end

    opt.on("--rebuild", "rebuild package") do
        o_rebuild = true
    end

    opt.on("--src-dir DIR","don't import but use existing source directory") do |dir|
        o_src_dir = dir
    end
end

# The remaining arguments are the packages that have been selected on console
# only these ones should be considered
o_selected_packages = options.parse(ARGV)

## OBS Content -- entry of repositories hosting rock debian source packages
build_projects = Array.new
build_projects << [ "home:roehr:rock-robotics","xUbuntu_12.04"]
build_projects << [ "home:sylvainjoyeux:ubuntu:12.04:universe","xUbuntu_12.04"]
build_projects << [ "Ubuntu:12.04","standard"]

available_packages = []
build_projects.each do |build_repository|
    project, repository = build_repository
    available_packages += Autoproj::Packaging::OSC.list_packages(project, repository)
end

if o_available
    puts available_packages.join("\n")
    exit 0
end

if o_list_build_projects
    build_projects.each do |project,repo|
        puts "project: #{project}, repository: #{repo}"
    end
    exit 0
end
#####


root_dir  = Autoproj::CmdLine.initialize_root_directory
selection = Autoproj::CmdLine.initialize_and_load(o_selected_packages)
selection = Autoproj::CmdLine.resolve_user_selection(selection).packages

packager = Autoproj::Packaging::Debian.new(File.join(Autoproj.root_dir, "debian"))
packager.prepare

# Make sure that when we request a package build we only get this one,
# and not the pattern matched to other packages, e.g. for orogen
selection = selection.select do |pkg_name, i|
    if o_selected_packages.empty? or o_selected_packages.include?(pkg_name)
        true
    else
        false
    end
end

Dir.chdir(Autoproj::Packaging::OSC_BUILD_DIR) do

    if o_all_packages
        Autobuild.do_update = true
        selection.each_with_index do |pkg_name, i|
            pkg = Autoproj.manifest.package(pkg_name).autobuild

            if skip && osc_dir
                pkg_osc_dir = File.join(osc_dir, Autoproj::Packaging::Packager.osc_package_name(pkg))
                if File.directory?(pkg_osc_dir)
                    puts "skipping existing package #{pkg_name} (#{i + 1}/#{selection.size})"
                    next
                end
            end

            puts "packaging #{pkg_name} (#{i + 1}/#{selection.size})"
            if File.file?(File.join(pkg.srcdir, "CMakeLists.txt"))
                cmakelists_txt = File.read(File.join(pkg.srcdir, "CMakeLists.txt"))
                if cmakelists_txt =~ /include\(Rock\)|Rock\.cmake/ || cmakelists_txt =~ /find_package\(Rock\)/
                    pkg.depends_on "base/cmake" unless pkg.name == "base/cmake"
                end
            end

            begin
                packager.package(pkg, {:force_update => o_rebuild, :patch_dir => o_patch_dir, :existing_source_dir => o_src_dir })
            rescue Interrupt
                raise
            rescue Exception => e
                puts "failed to package #{pkg.name}: #{e.message} #{e.backtrace}"
                next
            end
        end
    end

    # Check for osdeps -- fixed set of repositories at the moment
    if o_osdeps

        # Opendeps to process and check whether they and they dependencies are 
        # available
        openlist_osdeps = packager.osdeps
        # List of which osdeps which already have dealt with
        blacklist_osdeps = []
        # Maintain a listof which osdeps to update
        update_osdeps = []

        # Set list of osdeps, which need to be manually packaged
        override_osdeps = { "ruby-nokogiri" => :gem }
        
        while true
            if not osdeps_name = openlist_osdeps.delete_at(0)
                break
            end

            if blacklist_osdeps.include?(osdeps_name)
                next
            end

            # Workaround for nokogiri -- insert to ruby_gems list to force
            # gem2deb usage instead of default os package
            if override_osdeps.has_key?(osdeps_name)
                type = override_osdeps[osdeps_name]
                if  type == :gem
                    packager.ruby_gems << osdeps_name.sub("ruby-","")
                else 
                    raise ArgumentError, "osc_package: unsupported osdeps override: #{type}"
                end
                next
            end

            if not available_packages.include?(osdeps_name)
                Autoproj.warn "OSC: Missing dependency: '#{osdeps_name}' --creating package dir in #{Autoproj::Packaging::OSC_BUILD_DIR}"
                if !File.directory?(Autoproj::Packaging::OSC_BUILD_DIR)
                    FileUtils.mkdir(Autoproj::Packaging::OSC_BUILD_DIR) 
                end

                Dir.chdir(Autoproj::Packaging::OSC_BUILD_DIR) do
                    if system("osc_ubuntu_universe_package #{osdeps_name}")
                        update_osdeps << osdeps_name
                    else 
                        Autoproj.warn "OSC: universe package for osdeps '#{osdeps_name}' could not be found"
                    end
                    blacklist_osdeps << osdeps_name
                    add_osdeps = Autoproj::Packaging::OSC.resolve_dependencies(osdeps_name)
                    open_osdeps = add_osdeps.collect do |pkg| 
                        if !blacklist_osdeps.include?(pkg)
                            pkg
                        end
                    end.compact
                    openlist_osdeps += open_osdeps if open_osdeps
                end
            end
        end

        # Update the osc directory if given
        if osc_dir
            Dir.chdir(Autoproj::Packaging::OSC_BUILD_DIR) do
                update_osdeps.each do |name|
                    puts "OSC -- update osdeps gem: #{name}"
                    if File.directory?(name)
                       Autoproj::Packaging::OSC.update_dir(osc_dir,Autoproj::Packaging::OSC_BUILD_DIR, name, ["_service"], o_commit)
                    else 
                        Autoproj.warn "OSC: Requested update for #{name}, but directory does not exists in #{Autoproj::Packaging::OSC_BUILD_DIR}"
                    end
                end
            end
        end

    end 

    if o_extra_gem
        packager.ruby_gems << o_extra_gem
    end

    # Convert gems of which we know that need to be packaged -- needs to be set here, to include the osdeps overrides
    packager.convert_gems({:force_update => false, :patch_dir => o_patch_dir})

    if osc_dir
        if o_all_packages
            # Update all packages
            selection.each_with_index do |pkg_name, i|
                pkg = Autoproj.manifest.package(pkg_name).autobuild
                # Excluding ruby packages here since they need a special treatment
                if pkg.kind_of?(Autoproj::RubyPackage)
                    next
                end

                puts "OSC -- update pkg: #{pkg_name}"
                # if the directory does not exist create one and add it to osc
                pkg_osc_name = Autoproj::Packaging::Packager.osc_package_name(pkg)
                Autoproj::Packaging::OSC.update_dir(osc_dir, Autoproj::Packaging::OSC_BUILD_DIR, pkg_osc_name, packager.file_suffix_patterns, o_commit)
            end
        end

        # Update all gems
        packager.ruby_gems.each do |gem_name|
            puts "OSC -- update gem: #{gem_name}"
            pkg_osc_name = packager.debian_ruby_name(gem_name)
            Autoproj::Packaging::OSC.update_dir(osc_dir, Autoproj::Packaging::OSC_BUILD_DIR, pkg_osc_name, packager.file_suffix_patterns, o_commit)
        end

        # Update rock gems
        packager.ruby_rock_gems.each do |gem_name|
            puts "OSC -- update rock gem (converted ruby package): #{gem_name}"
            pkg_osc_name = gem_name
            Autoproj::Packaging::OSC.update_dir(osc_dir, Autoproj::Packaging::OSC_BUILD_DIR, pkg_osc_name, packager.file_suffix_patterns, o_commit)
        end
    end # if osc_dir


    packager.cleanup

end # Dir.chdir
