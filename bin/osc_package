#! /usr/bin/env ruby
require 'rock/packaging/debian'

osc_dir = nil
skip = false
options = OptionParser.new do |opt|
    opt.on('--skip', 'Skip existing packages') do
        skip = true
    end
    opt.on("--osc DIR", String, "OpenBuildService checkout in which the generated packages should be registered") do |dir|
        osc_dir = dir
    end
end
remaining = options.parse(ARGV)

root_dir  = Autoproj::CmdLine.initialize_root_directory
selection = Autoproj::CmdLine.initialize_and_load(remaining)
selection = Autoproj::CmdLine.resolve_user_selection(selection).packages

packager = Autoproj::Packaging::Debian.new(File.join(Autoproj.root_dir, "debian"))
packager.prepare

Dir.chdir(Autoproj::Packaging::OSC_BUILD_DIR) do

    Autobuild.do_update = true
    selection.each_with_index do |pkg_name, i|
        pkg = Autoproj.manifest.package(pkg_name).autobuild

        if skip && osc_dir
            pkg_osc_dir = File.join(osc_dir, Autoproj::Packaging::Packager.osc_package_name(pkg))
            if File.directory?(pkg_osc_dir)
                puts "skipping existing package #{pkg_name} (#{i + 1}/#{selection.size})"
                next
            end
        end

        puts "packaging #{pkg_name} (#{i + 1}/#{selection.size})"
        if File.file?(File.join(pkg.srcdir, "CMakeLists.txt")) && File.read(File.join(pkg.srcdir, "CMakeLists.txt")) =~ /include\(Rock\)|Rock\.cmake/
            pkg.depends_on "base/types"
        end

        begin 
            packager.package(pkg)
        rescue Interrupt
            raise
        rescue Exception => e
            puts "failed to package #{pkg.name}: #{e.message}"
            next
        end
    end
    packager.convert_gems

    if osc_dir
        # Update all packages
        selection.each_with_index do |pkg_name, i|
            puts "OSC -- update pkg: #{pkg_name}"
            pkg = Autoproj.manifest.package(pkg_name).autobuild
            # if the directory does not exist create one and add it to osc
            pkg_osc_name = Autoproj::Packaging::Packager.osc_package_name(pkg)
            Autoproj::Packaging::OSC.update_dir(packager, osc_dir, pkg_osc_name)
        end

        # Update all gems
        packager.ruby_gems.each do |gem_name|
            puts "OSC -- update gem: #{gem_name}"
            pkg_osc_name = packager.debian_ruby_name(gem_name)
            Autoproj::Packaging::OSC.update_dir(packager, osc_dir, pkg_osc_name)
        end
    end # if osc_dir

    packager.cleanup

end # Dir.chdir
