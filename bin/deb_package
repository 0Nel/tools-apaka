#! /usr/bin/env ruby
require 'rock/packaging/debian'

o_architectures = []
o_distributions = []
o_skip = false
o_build_dir = nil
o_dest_dir = nil
o_patch_dir = nil
o_extra_gem = nil
o_all_packages = true
o_rebuild = false
o_src_dir = nil
o_ps_dir = nil
o_job = false
o_job_name = nil
o_job_cleanup = false
o_job_cleanup_all = false
o_job_remove = false
o_job_remove_all = false
o_flow = nil
o_ruby_job = nil
o_package = false
o_overwrite = false
o_list = false
o_flavor = ENV['AUTOPROJ_CURRENT_ROOT'].split('/')[-1]
o_rock_install_dir=nil
o_parallel_builds = false
o_control_job = false
o_all_control_jobs = false

options = OptionParser.new do |opt|
    opt.banner = "Usage: deb_package [options]"
    opt.on('--skip', 'Skip existing packages') do
        o_skip = true
    end
    opt.on("--dest-dir DIR", String, "Destination Folder of the source-package") do |dir|
        o_dest_dir = File.expand_path(dir)
        if !File.directory?(o_dest_dir)
            puts "Given destination directory '#{o_dest_dir}' does not exist"
            exit -1
        end
    end
    opt.on("--build-dir DIR", String, "Build Folder of the source package -- needs to be within an autoproj installation") do |dir|
        o_build_dir = File.expand_path(dir)
        if !File.directory?(o_build_dir)
            puts "Given build directory '#{o_build_dir}' does not exist"
            exit -1
        end
    end
    opt.on("--patch-dir DIR", String, "Overlay directory to patch existing packages (and created gems) during the packaging process") do |dir|
        o_patch_dir = File.expand_path(dir)
        if !File.directory?(o_patch_dir)
            puts "Given patch directory '#{o_patch_dir}' does not exist"
            exit -1
        end
    end

    opt.on("--[no-]verbose", "display output of commands on stdout") do |v| Autobuild.verbose = v end
    opt.on("--[no-]debug", "debug information (for debugging purposes)") do |v| Autobuild.debug = v end

    opt.on("--gem NAME", "provide the name of a gem to convert") do |gem|
        o_all_packages = false
        o_extra_gem = gem
    end

    opt.on("--rebuild", "rebuild package") do
        o_rebuild = true
    end

    opt.on("--src-dir DIR","don't import but use existing source directory") do |dir|
        o_src_dir = dir
        if !File.directory?(o_src_dir)
            puts "Given source directory '#{o_src_dir}' does not exist"
            exit -1
        end
    end
    opt.on("--package-set-dir DIR", String, "Directory with the binary-package set to update") do |dir|
        o_ps_dir = dir
        if !File.directory?(o_ps_dir)
            puts "Given source directory '#{o_ps_dir}' does not exist"
            exit -1
        end
    end
    opt.on("--create-job", "Create jenkins-jobs") do
        o_job = true
    end
    opt.on("--create-ruby-job", "Create jenkins-ruby-job") do
        o_ruby_job = true
    end
    opt.on("--create-flow-job name", String, "Create the jenkins-FLOW-job") do |name|
        o_flow = name
        if o_flow.nil? or o_flow == ""
            puts "no jobname given"
            exit -1
        end
    end
    opt.on("--cleanup-job name", String, "Cleanup jenkins-job") do |name|
        o_job_cleanup = true
        o_job_name = name
        if o_job_name.nil? or o_job_name.empty?
            puts "no jobname given"
            exit -1
        end
    end
    opt.on("--remove-job name", String, "Remove jenkins-job") do |name|
        o_job_remove = true
        o_job_name = name
        if o_job_name.nil? or o_job_name.empty?
            puts "no jobname given"
            exit -1
        end
    end
    opt.on("--cleanup-all-jobs", "Cleanup all jenkins jobs") do
        o_job_cleanup_all = true
    end
    opt.on("--remove-all-jobs", "Remove all jenkins jobs except flow- and control-jobs (a_/0_)") do
        o_job_remove_all = true
    end
    opt.on("--create-control-job name", "Create control-job named 0_<name>") do |name|
        o_control_job = name
    end
    opt.on("--create-control-jobs", "Create all control-jobs in the templates-folder") do
        o_all_control_jobs = true
    end
    opt.on("--architectures ARCHS", String, "Comma separated list of architectures to build for") do |architectures|
        o_architectures = architectures.delete(" ").split(/[,;]/)
    end
    opt.on("--distributions DISTS", String, "Comma separated list of distributions to build for") do |distributions|
        o_distributions = distributions.delete(" ").split(/[,;]/)
    end
    opt.on("--package", "Create choosen packages") do
        o_package = true
    end
    opt.on("--overwrite", "Overwrite existing Jenkins Jobs (History-loss!)") do
        o_overwrite = true
    end
    opt.on("--parallel", "Build jenkins-jobs in parallel, might be more unstable but much faster. Only useful with --create-flow-job") do
        o_parallel_builds = true
    end
    opt.on("--flavor name", "Use a specific flavor (defaults to directory-name)") do |name|
        if not (o_flavor.nil? or o_flavor == "")
            o_flavor = name
        end
    end
    opt.on("--update-list FILE", String, "Update the given osdep-file") do |file|
        o_list = file
    end
    opt.on("--rock-install-dir DIR", String, "Rock installation directory (prefix) for deployment of debian packages") do |dir|
        require 'pathname'
        if !Pathname.new(dir).absolute?
            raise ArgumentError, "Given path for --rock-install-dir has to be absolute, but was relative: '#{dir}'"
        end
        o_rock_install_dir = dir
    end
end

# The remaining arguments are the packages that have been selected on console
# only these ones should be considered
o_selected_packages = options.parse(ARGV)

################################################################################

if o_job_cleanup && o_job_name
    Autoproj::Packaging::Debian.cleanup_job(o_job_name)
    exit 0
end

if o_job_cleanup_all
    Autoproj::Packaging::Debian.cleanup_all_jobs
    exit 0
end

if o_job_remove && o_job_name
    Autoproj::Packaging::Debian.remove_job(o_job_name)
    exit 0
end

if o_job_remove_all
    Autoproj::Packaging::Debian.remove_all_jobs
    exit 0
end

root_dir  = Autoproj::CmdLine.initialize_root_directory
selection = Autoproj::CmdLine.initialize_and_load(o_selected_packages)
selection = Autoproj::CmdLine.resolve_user_selection(selection).packages

=begin
# basiert auf /opt/rock/master/.gems/gems/autoproj-1.13.2/lib/autoproj/manifest.rb Zeile 834
# Umgeht das Problem, dass Autoproj 체ber CmdLine nur die ausgew채hlten Pakete gibt (also alle Pakete des Paketsets + speziell ausgew채hlte) nicht aber deren Abh채ngigkeiten

# selection muss ein set sein??
result = Set.new
selection.each do |pkg_name|
    Autobuild::Package[pkg_name].all_dependencies(result)
end

selection = result | selection # -> union
=end

options = Hash.new

if o_distributions.size == 1
    operating_system = []
    case o_distributions[0]
    when "precise"
        operating_system << ["ubuntu","debian"]
        operating_system << ["12.04","12.04.4","lts","precise","pangolin","default"]
    when "trusty"
        operating_system << ["ubuntu","debian"]
        operating_system << ["14.04","14.04.2","lts","trusty","tahr","default"]
    when "vivid"
        operating_system << ["ubuntu","debian"]
        operating_system << ["15.04","lts","vivid","vervet","default"]
    when "squeeze"
        operating_system << ["debian"]
        operating_system << ["6.0","squeeze","default"]
    when "wheezy"
        operating_system << ["debian"]
        operating_system << ["7.8","wheezy","default"]
    when "jessie"
        operating_system << ["debian"]
        operating_system << ["8.1","jessie","default"]
    when "sid"
        operating_system << ["debian"]
        operating_system << ["9.0","sid","default"]
    else
        puts "WARNING: Custom setting of operating system to: #{o_distributions[0]} is not supported"
    end
    if !operating_system.empty?
        Autoproj::OSDependencies.operating_system = operating_system
        puts "Custom setting of operating system to: #{operating_system}"
    end
end

packager = Autoproj::Packaging::Debian.new(File.join(Autoproj.root_dir, "debian"))

packager.add_package_alias "tools/rtt", "rtt"
packager.add_package_alias "tools/rtt-typelib", "rtt-typelib"
packager.add_package_alias "tools/typelib", "typelib"
packager.add_package_alias "tools/utilrb", "utilrb"

packager.prepare

if o_build_dir
    packager.build_dir = o_build_dir
end

if o_rock_install_dir
    packager.rock_install_directory = o_rock_install_dir
end

# Make sure that when we request a package build we only get this one,
# and not the pattern matched to other packages, e.g. for orogen
selection = selection.select do |pkg_name, i|
    if o_selected_packages.empty? or o_selected_packages.include?(pkg_name)
        true
    else
        false
    end
end

Dir.chdir(packager.build_dir) do

    if o_package && o_all_packages
        Autobuild.do_update = true
        selection.each_with_index do |pkg_name, i|
            if pkg = Autoproj.manifest.package(pkg_name)
                pkg = pkg.autobuild
            else
                Autoproj.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
                next
            end

            if o_skip && o_obs_dir
                pkg_obs_dir = File.join(o_obs_dir, Autoproj::Packaging::Packager.obs_package_name(pkg))
                if File.directory?(pkg_obs_dir)
                    puts "skipping existing package #{pkg_name} (#{i + 1}/#{selection.size})"
                    next
                end
            end

            puts "packaging #{pkg_name} (#{i + 1}/#{selection.size})"
            if File.file?(File.join(pkg.srcdir, "CMakeLists.txt"))
                cmakelists_txt = File.read(File.join(pkg.srcdir, "CMakeLists.txt"))
                if cmakelists_txt =~ /include\(Rock\)|Rock\.cmake/ || cmakelists_txt =~ /find_package\(Rock\)/
                    pkg.depends_on "base/cmake" unless pkg.name == "base/cmake"
                end
            end

            begin
                packager.package(pkg, {:force_update => o_rebuild, :patch_dir => o_patch_dir, :existing_source_dir => o_src_dir, :package_set_dir => o_ps_dir, :distributions => o_distributions })
            rescue Interrupt
                raise
            rescue Exception => e
                puts "failed to package #{pkg.name}: #{e.message} #{e.backtrace}"
                next
            end
        end
    end

    if o_job
        selection.each_with_index do |pkg_name, i|
            if pkg = Autoproj.manifest.package(pkg_name)
                pkg = pkg.autobuild
            else
                Autoproj.warn "Package: #{pkg_name} is not a known rock package (but maybe a ruby gem?)"
                next
            end
            puts "(#{i+1}/#{selection.size}) Creating Jenkins-job: #{pkg_name}"
            options = Hash.new
            if !o_architectures.empty?
                options[:architectures] = o_architectures
            end
            if !o_distributions.empty?
                options[:distributions] = o_distributions
            end
            packager.create_package_job(pkg, options, o_overwrite)
        end
    end

    if o_flow
        puts "Creating FLOW-Job"
        packager.create_flow_job(o_flow, selection, o_flavor,o_parallel_builds, o_overwrite)
    end

    if o_control_job
        puts "Creating Control-Job (0_)"
        packager.create_control_job("0_" + o_control_job, o_overwrite)
    end

    if o_all_control_jobs
        puts "Creating all Control-Jobs (0_)"
        packager.create_control_jobs o_overwrite
    end

    if o_list
        puts "Updating osdep-list"
        selection.each do |pkg_name|
            pkg = Autoproj.manifest.package(pkg_name)
            if !pkg.nil?
                pkg = pkg.autobuild
                packager.update_list(pkg, o_list)
            else
                packager.update_list(pkg_name, o_list)
            end
        end
    end

    if o_ruby_job
        puts "Creating Gem-Jobs"

        # allow --create-ruby-jobs --gem mygem
        # to create this specific gem
        if !o_extra_gem
            selection.each do |pkg_name|
                pkg = Autoproj.manifest.package(pkg_name)
                if pkg
                    pkg = pkg.autobuild
                    packager.dependencies pkg
                else
                    Autoproj.warn "Assuming that '#{pkg_name}' is a ruby gem"
                    # Fails to be detected as normal package
                    # so we assume it is a ruby gem
                    o_extra_gem = pkg_name
                end
            end
        end

        if o_extra_gem
	    Autoproj::Packaging::Packager.info "Adding extra gem: #{o_extra_gem}"
            packager.ruby_gems << o_extra_gem
        end

        options = Hash.new
        if !o_architectures.empty?
            options[:architectures] = o_architectures
        end
        if !o_distributions.empty?
            options[:distributions] = o_distributions
        end

        i = 1
        packager.ruby_gems.each do |gem_name,version|
            puts "#{i}/#{packager.ruby_gems.size + packager.ruby_rock_gems.size}) Creating Jenkins-job: #{gem_name}"
            options[:job_name] = "gem_" + gem_name
            packager.create_ruby_job(gem_name, options, o_overwrite)
            i = i+1
        end
        packager.ruby_rock_gems.each do |gem_name,version|
            puts "#{i}/#{packager.ruby_gems.size + packager.ruby_rock_gems.size}) Creating Jenkins-job: #{gem_name}"
            packager.create_ruby_job(gem_name, options, o_overwrite)
            i = i+1
        end
    end

    if o_extra_gem
        Autoproj.info "Adding extra gems: #{o_extra_gem}"
        packager.ruby_gems << o_extra_gem
    end

    if o_dest_dir && o_package

        if o_all_packages
            # Test selection for unknown packages and try to use them as gems
            selection.each_with_index do |pkg_name, i|
                pkg = Autoproj.manifest.package(pkg_name)
                if pkg
                    pkg = pkg.autobuild
                else
                    Autoproj.warn "Assuming that '#{pkg_name}' is a ruby gem"
                    # Fails to be detected as normal package
                    # so we assume it is a ruby gem
                    packager.ruby_gems << o_extra_gem
                end
            end
        end

        # Convert gems of which we know that need to be packaged -- needs to be set here, to include the osdeps overrides
        packager.convert_gems({:force_update => o_rebuild, :patch_dir => o_patch_dir, :distributions => o_distributions})
        if o_all_packages
            # Update all packages
            selection.each_with_index do |pkg_name, i|
                pkg = Autoproj.manifest.package(pkg_name)
                if pkg
                    pkg = pkg.autobuild
                else
                    Autoproj.warn "Assuming that '#{pkg_name}' is a ruby gem"
                    # Fails to be detected as normal package
                    # so we assume it is a ruby gem
                    packager.ruby_gems << o_extra_gem
                end

                # Excluding ruby packages here since they need a special treatment
                if pkg.kind_of?(Autobuild::Ruby)
                    next
                end
                pkg_obs_name = Autoproj::Packaging::Packager.obs_package_name(pkg)
            #Autoproj::Packaging::OBS.update_dir(o_obs_dir, packager.build_dir, pkg_obs_name, packager.file_suffix_patterns, o_commit)

                # sync the directory in build/obs and the target directory based on an existing
                # files pattern
                files = []
                packager.file_suffix_patterns.map do |p|
                    # Finding files that exist in the source directory
                    # needs to handle ruby-hoe_0.20130113/*.dsc vs. ruby-hoe-yard_0.20130113/*.dsc
                    # and ruby-hoe/_service
                    glob_exp = File.join(packager.build_dir,pkg_obs_name,"*#{p}")
                    files += Dir.glob(glob_exp)
                end
                files = files.flatten.uniq
                dest_dir = File.join(o_dest_dir, pkg_obs_name)

                FileUtils.mkdir_p dest_dir
                FileUtils.cp files, dest_dir
            end
        end
    end

    if o_dest_dir
        # Update all gems
        packager.ruby_gems.each do |gem_name, version|
            if version
                puts "deb_package -- updating gem: #{gem_name} with version #{version}"
            else
                puts "deb_package -- updating gem: #{gem_name}"
            end
            pkg_obs_name = packager.debian_ruby_name(gem_name)
            files = []
            packager.file_suffix_patterns.map do |p|
                # Finding files that exist in the source directory
                # needs to handle ruby-hoe_0.20130113/*.dsc vs. ruby-hoe-yard_0.20130113/*.dsc
                # and ruby-hoe/_service
                glob_exp = File.join(packager.build_dir,pkg_obs_name,"*#{p}")
                files += Dir.glob(glob_exp)
            end
            files = files.flatten.uniq
            dest_dir = File.join(o_dest_dir, pkg_obs_name)

            FileUtils.mkdir_p dest_dir
            FileUtils.cp files, dest_dir
        end

        # Update rock gems
        packager.ruby_rock_gems.each do |gem_name, version|
            puts "deb_package -- update rock gem (converted ruby package): #{gem_name}"
            pkg_obs_name = gem_name
            files = []
            packager.file_suffix_patterns.map do |p|
                # Finding files that exist in the source directory
                # needs to handle ruby-hoe_0.20130113/*.dsc vs. ruby-hoe-yard_0.20130113/*.dsc
                # and ruby-hoe/_service
                glob_exp = File.join(packager.build_dir,pkg_obs_name,"*#{p}")
                #basename = Dir.glob(glob_exp).first[0..(Dir.glob(glob_exp).first.size-(p.size+1))]
                #if basename[-2] == '-' 
                #    number = basename[-2..-1]
                #    basename = basename[0..-3]
                #end
                #newname = (basename + '~' + o_distributions.first)
                #if number
                #    newname = newname + number
                #end
                #newname = newname + p
                #FileUtils.mv(Dir.glob(glob_exp).first, newname)
                #files << newname
                files += Dir.glob(glob_exp)
            end
            files = files.flatten.uniq
            dest_dir = File.join(o_dest_dir, pkg_obs_name)

            FileUtils.mkdir_p dest_dir
            FileUtils.cp files, dest_dir
        end
    end # if o_dest_dir


    packager.cleanup

end # Dir.chdir
