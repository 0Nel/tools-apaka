#!/usr/bin/make -f

# BEGIN ENVIRONMENT SETUP
rock_install_dir = /opt/rock
rock_bindir = /tmp/rock/bin

ruby_ver = 1.9.1
arch_name = $(subst linux-gnu,linux-,$(patsubst %linux-gnu,%linux,$(DEB_BUILD_GNU_TYPE)))
ruby_binary = /usr/bin/ruby$(ruby_ver)
ruby_libdir = /usr/lib/ruby
rockruby_libdir = $(rock_install_dir)/lib/ruby/$(ruby_ver)
rockruby_archdir = $(rock_install_dir)/lib/ruby/$(ruby_ver)/$(arch_name)

# Update execution path for orogen, so that it picks up ruby-facets (since we don't put much effort into standardizing facets it installs in
# vendor_ruby/standard and vendory_ruby/core) -- from Ubuntu 13.04 ruby-facets will be properly packaged
rockruby_extra_libdir = /usr/lib/ruby/vendor_ruby/standard/:/usr/lib/ruby/vendor_ruby/core/

# Setting up the env variables
env_setup = PATH=$(rock_bindir):$(PATH)
env_setup += RUBYLIB=$(rockruby_libdir):$(rockruby_archdir):$(rockruby_extra_libdir):$(RUBYLIB)
env_setup += Rock_DIR=$(rock_install_dir)/share/rock/cmake CMAKE_PREFIX_PATH=$(rock_install_dir)
env_setup += PKG_CONFIG_PATH=$(rock_install_dir)/lib/pkgconfig:$(PKG_CONFIG_PATH)
env_setup += LD_LIBRARY_PATH=$(rock_install_dir)/lib:$(LD_LIBRARY_PATH)
env_setup += OROGEN_PLUGIN_PATH=$(rock_install_dir)/share/orogen/plugins

DEB_VERBOSE_ALL=1
include /usr/share/cdbs/1/rules/debhelper.mk
DEB_DH_SHLIBDEPS_ARGS_ALL=-l$(rock_install_dir)/lib

pre-build::
	# Debug information:
	echo "System ruby libraries: "
	if [ -d $(ruby_libdir) ]; then find $(ruby_libdir); fi

	echo "Installed into $(rock_install_dir):"
	if [ -d $(rock_install_dir) ]; then find $(rock_install_dir); fi

	echo "Current directory:"
	find .
	
	# Set the ruby version -- workaround, until we use base/types to trigger to update-alternatives and set /opt/rock/bin/ruby
	if [ ! -d $(rock_bindir) ]; then mkdir -p $(rock_bindir); fi
	if [ ! -e $(rock_bindir)/ruby ]; then ln -s $(ruby_binary) $(rock_bindir)/ruby; fi

# END ENVIRONMENT SETUP
######################################
# BEGIN OROGEN -- This block needs to be executed before CMAKE

<% if package.class == Autobuild::Orogen %>
	# Making sure orogen is executed before cmake is called
	echo "pre-build: calling orogen in order to generate CMake layout"
	$(env_setup) orogen <%= Autobuild::Orogen.orogen_options.join(" ") %> <%= pkg.orogen_options.join(" ") %> --corba --transports=corba,mqueue,typelib --type-export-policy=used <%= package.orogen_file %>
	echo "Current directory including oroGen generated files"
	find . 
<% end %>

# END OROGEN
######################################
# BEGIN CMAKE
#
<% if package.class == Autobuild::CMake || package.class == Autobuild::Orogen %>
# Defining the cmake command and setting the required enviroment variables
# PKG_CONFIG_PATH Resolve Rock package via pkg-config
# Rock_DIR Set to make sure find_package(Rock) does work
# ROCK_CMAKE_MACROS Used in some patches to set the CMAKE_MODULE_PATH, allowing to find Rock.cmake
CMAKE = $(env_setup) cmake
DEB_CMAKE_INSTALL_PREFIX = $(rock_install_dir)

# Debian packaging discourages the use of rpath, and 
# cdbs actively disables it setting CMAKE_SKIP_RPATH=ON
# however since we install into /opt/rock we turn skipping off again
# CXXFLAGS+=-Wl,-rpath-link,/opt/rock/lib
DEB_CMAKE_EXTRA_FLAGS = -DCMAKE_SKIP_RPATH=OFF
# Telling FindGEM.cmake to search for os packages using pkg-config and not for gems
DEB_CMAKE_EXTRA_FLAGS += -DGEM_OS_PKG=TRUE
# Leaving RUBY_EXECUTABLE unset since it maps to a path of the user executing the upload script
DEB_CMAKE_EXTRA_FLAGS += <%= package.defines.map { |k, v| "-D#{k}=#{v}" unless "#{k}" == "RUBY_EXECUTABLE" }.join(" ") %>
include /usr/share/cdbs/1/class/cmake.mk

# END CMAKE
##########################################
# BEGIN AUTOTOOLS
#
<% elsif package.class == Autobuild::Autotools %>
DEB_CONFIGURE_PREFIX= /opt/rock
DEB_MAKE_EXTRA_FLAGS = <%= package.configureflags.join(" ") %>
    <% if package.using[:libtool] %>
DEB_AUTO_UPDATE_LIBTOOL = pre # post / pre
    <% end %>
include /usr/share/cdbs/1/class/autotools.mk

# END AUTOTOOLS
############################################
# BEGIN IMPORTER
#
<% elsif package.importer.kind_of?(Autobuild::ArchiveImporter) || package.kind_of?(Autobuild::ImporterPackage) %>
CMAKE = $(env_setup) cmake
DEB_CMAKE_INSTALL_PREFIX = $(rock_install_dir)
DEB_CMAKE_EXTRA_FLAGS = -DCMAKE_SKIP_RPATH=OFF
DEB_CMAKE_EXTRA_FLAGS += -DGEM_OS_PKG=TRUE
# Leaving RUBY_EXECUTABLE unset since it maps to a path of the user executing the upload script
include /usr/share/cdbs/1/class/cmake.mk

# END IMPORTER
# ##########################################
#
<% else 
raise "debian/rules: cannot handle package type #{package.class} for #{package.name}"
end %>
