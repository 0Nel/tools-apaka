#!/bin/bash

##============================== *** DESCRIPTION apaka-make-deb  ***===============================##
##                                                                                                 ## 
##                                                                                                 ##
##      Script for automated debian packaging based on a given autoproj based workspace.           ##
##      Provide the absolute path of the designated working directory (WD) as the 1st ARGUMENT!    ##
##      ( May be executed from anywhere.. )                                                        ##
##                                                                                                 ##
##      Execution: bash apaka-make-deb absolute_path_WD                                            ##
##      Example: bash apaka-make-deb ~/mantis_dev                                                  ##
##                                                                                                 ##
##      Alternative: make file executable with >> chmod +x apaka-make-deb <<                       ##
##                   execute >> ./apaka-make-deb absolute_path_WD <<                               ##
##                                                                                                 ##
##      Available flags:                                                                           ##
##            --nomake  --> skips the update and building of apaka                                 ##
##            --help    --> prints this dialog                                                     ##
##            --cleanup --> cleans up working directory                                            ##
##                          (incl. remove of build dir & tools/apaka)                              ##
##                                                                                                 ##
##                                                                                                 ##
## ~~~ Check hard coded variables if you want to change architecture, distribution or release ~~~  ##
##=================================================================================================##

architecture="amd64"
dist="xenial"
release="master-18.01"

# =============================================  Flag handlers  ============================================ #

trap "exit" INT

# check for input argument
if [[ $# -eq 0 ]]
    then
      echo "Argument missing! Provide absolute path to the directory containing env.h"
      echo "Type >> bash apaka-make-deb --help << in order to get a script description"
    exit 1
fi

# print help
if [[ $* == *--help* ]]; then  #poor style, but also not dangerous
  head -25 apaka-make-deb | sed 1,1d 
  exit 1
fi

# set working directory
dir=$1

# clean working directory
function cleanFunc {
  echo "Cleaning up working directory..";
  if [ -d "$dir/build" ]; then echo "Removing build directory"; rm -rf $dir/build; fi
  if [ -d "$dir/tools/apaka" ]; then echo "Removing apaka directory"; rm -rf $dir/tools/apaka; fi
  if [ -d "$dir/deb_patches" ]; then echo "Removing deb_patches directory"; rm -rf $dir/deb_patches; fi
  if [[ $(cd "$dir/autoproj/" && grep -rc tools/apaka --include=manifest | cut -d':' -f2) -gt 0 ]]; then
    echo "Resetting autoproj manifest"
    sed -i '/tools\/apaka/d' $dir/autoproj/manifest
  fi
  echo "Successfully cleaned $dir workspace"
}

if [[ $* == *--cleanup* ]]; then  #poor style, but also not dangerous
  while true; do
    read -p "Are you sure you want to clean your working directory? This will delete the build directory! [y/n] " confirm
    case $confirm in
      [Yy]* ) cleanFunc; exit 1;;
      [Nn]* ) echo "Abort mission"; exit 1;;
      * ) echo "Please type y or n!";;
    esac
  done
fi

# set bool for update and build apaka
build=true
if [[ $* == *--nomake* ]]; then  #poor style, but also not dangerous
  echo "apaka won't be build due to --nomake flag"
  build=false
fi

# ==================================================  Main  ================================================ #
# source environment
if cd "$dir"; then
  source env.sh
else
  echo "Provided argument is no valid directory"
  exit 1
fi

# clone apaka into directory
if $(git clone https://github.com/rock-core/tools-apaka "$dir/tools/apaka" 2> /dev/null); then
  echo "Cloned tools/apaka from git"
else
  echo "tools/apaka already exists. Skip cloning from git repository."
fi

# inject tools/apaka into autoproj/manifest
if [ -f "$dir/autoproj/manifest" ]; then 
  cd "$dir/autoproj"
  if [[ $(grep -rc tools/apaka --include=manifest | cut -d':' -f2) -eq 0 ]]; then
    echo "Adding tools/apaka to autoproj/manifest"
    lineNumber=$(($(grep -rn layout --include=manifest | cut -d':' -f2 ) + 1))
    awk -v number=$lineNumber -v line="    - tools/apaka" 'NR == number {print line} {print}' manifest > manifest.new && mv manifest.new manifest
  fi
  cd ..
else
  echo "Could not find valid manifest file in autoproj directory."
  exit 1
fi

# update and build apaka
if $build; then
  aup apaka && amake apaka
fi

# clone deb_patches into directory
if $(git clone https://github.com/2maz/deb_patches.git "$dir/deb_patches" 2> /dev/null); then
  echo "Cloned deb_patches from git"
else
  echo "deb_patches already exists. Skip cloning from git repository."
fi

# prepare and execute packaging
echo "Prepare for packaging"
deb_local --architecture $architecture --distribution $dist --release-name $release --prepare
echo "Perform packaging"
deb_local --patch-dir deb_patches --architecture $architecture --distribution $dist --release-name $release
